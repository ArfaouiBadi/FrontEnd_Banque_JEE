
package Proxy;

import java.util.List;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.Action;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.9-b130926.1035
 * Generated source version: 2.2
 * 
 */
@WebService(name = "BanqueService", targetNamespace = "http://Service/")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface BanqueService {


    /**
     * 
     * @param arg2
     * @param arg1
     * @param arg0
     */
    @WebMethod
    @RequestWrapper(localName = "transfer", targetNamespace = "http://Service/", className = "Proxy.Transfer")
    @ResponseWrapper(localName = "transferResponse", targetNamespace = "http://Service/", className = "Proxy.TransferResponse")
    @Action(input = "http://Service/BanqueService/transferRequest", output = "http://Service/BanqueService/transferResponse")
    public void transfer(
        @WebParam(name = "arg0", targetNamespace = "")
        Long arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        Long arg1,
        @WebParam(name = "arg2", targetNamespace = "")
        double arg2);

    /**
     * 
     * @param arg0
     * @return
     *     returns Proxy.Compte
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "findById", targetNamespace = "http://Service/", className = "Proxy.FindById")
    @ResponseWrapper(localName = "findByIdResponse", targetNamespace = "http://Service/", className = "Proxy.FindByIdResponse")
    @Action(input = "http://Service/BanqueService/findByIdRequest", output = "http://Service/BanqueService/findByIdResponse")
    public Compte findById(
        @WebParam(name = "arg0", targetNamespace = "")
        Long arg0);

    /**
     * 
     * @param arg1
     * @param arg0
     */
    @WebMethod
    @RequestWrapper(localName = "withdraw", targetNamespace = "http://Service/", className = "Proxy.Withdraw")
    @ResponseWrapper(localName = "withdrawResponse", targetNamespace = "http://Service/", className = "Proxy.WithdrawResponse")
    @Action(input = "http://Service/BanqueService/withdrawRequest", output = "http://Service/BanqueService/withdrawResponse")
    public void withdraw(
        @WebParam(name = "arg0", targetNamespace = "")
        Long arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        double arg1);

    /**
     * 
     * @param arg0
     * @return
     *     returns Proxy.Compte
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "openAccount", targetNamespace = "http://Service/", className = "Proxy.OpenAccount")
    @ResponseWrapper(localName = "openAccountResponse", targetNamespace = "http://Service/", className = "Proxy.OpenAccountResponse")
    @Action(input = "http://Service/BanqueService/openAccountRequest", output = "http://Service/BanqueService/openAccountResponse")
    public Compte openAccount(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0);

    /**
     * 
     * @return
     *     returns java.util.List<Proxy.Compte>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getAccounts", targetNamespace = "http://Service/", className = "Proxy.GetAccounts")
    @ResponseWrapper(localName = "getAccountsResponse", targetNamespace = "http://Service/", className = "Proxy.GetAccountsResponse")
    @Action(input = "http://Service/BanqueService/getAccountsRequest", output = "http://Service/BanqueService/getAccountsResponse")
    public List<Compte> getAccounts();

    /**
     * 
     * @param arg2
     * @param arg1
     * @param arg0
     * @return
     *     returns double
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "convertCurrency", targetNamespace = "http://Service/", className = "Proxy.ConvertCurrency")
    @ResponseWrapper(localName = "convertCurrencyResponse", targetNamespace = "http://Service/", className = "Proxy.ConvertCurrencyResponse")
    @Action(input = "http://Service/BanqueService/convertCurrencyRequest", output = "http://Service/BanqueService/convertCurrencyResponse")
    public double convertCurrency(
        @WebParam(name = "arg0", targetNamespace = "")
        double arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        String arg1,
        @WebParam(name = "arg2", targetNamespace = "")
        String arg2);

    /**
     * 
     * @param arg1
     * @param arg0
     */
    @WebMethod
    @RequestWrapper(localName = "deposit", targetNamespace = "http://Service/", className = "Proxy.Deposit")
    @ResponseWrapper(localName = "depositResponse", targetNamespace = "http://Service/", className = "Proxy.DepositResponse")
    @Action(input = "http://Service/BanqueService/depositRequest", output = "http://Service/BanqueService/depositResponse")
    public void deposit(
        @WebParam(name = "arg0", targetNamespace = "")
        Long arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        double arg1);

}
